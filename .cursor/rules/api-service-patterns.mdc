---
description: API service patterns và standards cho REST/GraphQL clients
globs: ["lib/data_source/api/**/*.dart"]
alwaysApply: false
---

# API Service Patterns

## Service Architecture
- Sử dụng `@LazySingleton()` cho API services
- Inject API clients qua constructor dependency injection
- Provide services qua Riverpod Provider pattern:
```dart
final appApiServiceProvider = Provider<AppApiService>(
  (ref) => getIt.get<AppApiService>(),
);
```

## API Client Types
- `NoneAuthAppServerApiClient` - cho endpoints không cần authentication
- `AuthAppServerApiClient` - cho endpoints cần authentication  
- `RandomUserApiClient` - cho external APIs
- `RawApiClient` - cho raw HTTP requests

## REST API Patterns
```dart
// GET với decoder
Future<ModelType?> getResource() async {
  return _authClient.request(
    method: RestMethod.get,
    path: 'v1/resource',
    successResponseDecoderType: SuccessResponseDecoderType.jsonObject,
    decoder: (json) => ModelType.fromJson(json.safeCast<Map<String, dynamic>>() ?? {}),
  );
}

// POST với body
Future<void> createResource(Map<String, dynamic> data) async {
  await _noneAuthClient.request(
    method: RestMethod.post,
    path: 'v1/resource',
    body: data,
  );
}

// GET với pagination
Future<PagingDataResponse<ModelType>?> getPagedResources({
  required int page,
  required int? limit,
}) {
  return _client.request(
    method: RestMethod.get,
    path: 'v1/resources',
    queryParameters: {
      'page': page,
      'results': limit,
    },
    successResponseDecoderType: SuccessResponseDecoderType.paging,
    decoder: (json) => ModelType.fromJson(json.safeCast<Map<String, dynamic>>() ?? {}),
  );
}
```

## Error Handling
- Tất cả exceptions được map qua `DioExceptionMapper`
- Sử dụng `ApiInfo` để track method và URL cho debugging
- Error response decoding qua `BaseErrorResponseDecoder`

## Method Naming Conventions
- `get{Resource}()` - single resource
- `get{Resources}()` - list/paged resources  
- `create{Resource}()` - POST operations
- `update{Resource}()` - PUT/PATCH operations
- `delete{Resource}()` - DELETE operations

## Response Decoder Types
- `SuccessResponseDecoderType.jsonObject` - single object
- `SuccessResponseDecoderType.paging` - paginated response
- `SuccessResponseDecoderType.plain` - plain response

## Type Safety
- Sử dụng `safeCast<Map<String, dynamic>>()` cho JSON parsing
- Provide empty map `{}` làm fallback cho fromJson
- Generic types cho reusable response patterns